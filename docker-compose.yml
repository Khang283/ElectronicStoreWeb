#REMEMBER TO SKIP TEST IN JAVA OTHERWISE APP WILL TRY TO TEST WHEN NOT CONNECT TO OTHER SERVICES
version: "3.8"
# volumes:
#   prometheus-data:
#     driver: ${PROMETHEUS_VOLUME}
#   grafana-data:
#     driver: ${GRAFANA_VOLUME}
services:
  mysqldb:
    image: "mysql:latest"
    restart: always
    ports:
      - "3307:3306"
    environment:
      - MYSQL_DATABASE=${DATABASE_NAME}
      - MYSQL_ROOT_PASSWORD=${DATABASE_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}
      - TZ=${TIME_ZONE}
    container_name: mysqldb
    volumes:
      - ${DATABASE_VOLUME}:/var/lib/mysql

  redis:
    image: "redis:7.0.5-alpine"
    restart: always
    ports:
      - "6379:6379"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - TZ=${TIME_ZONE}
    container_name: redis

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    depends_on:
      - mysqldb
    ports:
      - "8100:80"
    environment:
      PMA_HOST: mysqldb

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: khang283/electronicstore-backend:latest
    restart: on-failure
    ports:
      - "8080:8080"
    environment:
      - TZ=${TIME_ZONE}
    env_file:
      - ${SERVER_VOLUME}/.env
    volumes:
      - ${SERVER_VOLUME}/logs:/logs
    depends_on:
      mysqldb:
        condition: service_started
      redis:
        condition: service_started
      recommend:
        condition: service_started
    links:
      - mysqldb
      - redis
      - recommend

  # client:
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile
  #   restart: on-failure
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     backend:
  #       condition: service_started
  #     redis:
  #       condition: service_started
  #   environment:
  #     - TZ=${TIME_ZONE}
  #   links:
  #     - backend
  #     - redis

  recommend:
    build:
      context: ./Recommend
      dockerfile: Dockerfile
    image: khang283/electronicstore-recommend:latest
    restart: on-failure
    ports:
      - "8888:8888"
    # depends_on:
    #   client:
    #     condition: service_started
    environment:
      - TZ=${TIME_ZONE}
    # links:
    #   - client

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    user: '0'  #SAME AS GRAFANA
    volumes:
      - ${PROMETHEUS_VOLUME}/etc:/etc/prometheus
      - ${PROMETHEUS_VOLUME}:/prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    links:
      - mysql_exporter
      - cadvisor
      - node_exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    # user: 1000:1000  #USE id -u command to find your userid and replace it to make sure you have permission to volumes
    user: '0' # USE THIS IF YOU ARE ROOT
    volumes:
      - ${GRAFANA_VOLUME}:/var/lib/grafana 
    environment:
      - 'GF_SMTP_ENABLED=false'
      # - 'GF_SMTP_HOST=smtp.gmail.com:587'
      # - 'GF_SMTP_USER=${GF_SMTP_USER}'
      # - 'GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}'
      # - 'GF_SMTP_FROM_ADDRESS={GF_SMTP_USER}'  
      # - 'GF_SERVER_DOMAIN=grafana.my.domain'
      # - 'GF_SERVER_ROOT_URL=grafana.my.domain'
    restart: unless-stopped
  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.7.0
    container_name: node_exporter
    # ports:
    #   - 9091:9091
    command:
      # - ' --web.listen-address=9091'
      - '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
  
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - "9092:9092"
    command:
      - '-port=9092'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
  
  mysql_exporter:
    image: quay.io/prometheus/mysqld-exporter
    container_name: mysql_exporter
    command:
     - --collect.info_schema.tablestats
     - "--mysqld.username=${DATABASE_USER}:${DATABASE_PASSWORD}"
     - "--mysqld.address=mysqldb:3306"
    ports:
      - 9104:9104
    links:
      - mysqldb
    depends_on:
      mysqldb:
        condition: service_started
    # environment:
    #   - DATA_SOURCE_NAME=exporter:exporter@(mysqld:3306)/

  portainer:
    image: portainer/portainer-ce:2.19.5
    container_name: portainer
    ports:
      - 9443:9443
    volumes:
      - ${PORTAINER_VOLUME}:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
